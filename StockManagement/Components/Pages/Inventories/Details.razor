@page "/inventories/details/{InventoryId:int}"

@using StockManagement.ViewModels.Inventories
@using StockManagement.Models

@inject IInventoryService InventoryService
@inject NavigationManager NavigationManager

<PageTitle>Inventory Details</PageTitle>

@if (loading)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    <MudText>Loading inventory details...</MudText>
}
else if (inventory != null)
{
    <MudStack Spacing="3">
        <!-- Header -->
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudTooltip Text="Back to Inventories">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                                   Color="Color.Primary"
                                   OnClick="@(() => NavigationManager.NavigateTo("/inventories"))" />
                </MudTooltip>
                <div>
                    <MudText Typo="Typo.h4">Inventory Details</MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">@inventory.Code</MudText>
                </div>
            </MudStack>
            <MudChip T="string" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Large" Variant="Variant.Filled">
                Completed
            </MudChip>
        </MudStack>

        <!-- Inventory Information Card -->
        <MudPaper Elevation="2" Class="pa-4">
            <MudGrid>
                <MudItem xs="12" sm="6" md="3">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Inventory Code</MudText>
                        <MudText Typo="Typo.body1"><b>@inventory.Code</b></MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Date</MudText>
                        <MudText Typo="Typo.body1"><b>@inventory.Date.ToShortDateString()</b></MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Total Expected</MudText>
                        <MudText Typo="Typo.body1"><b>@inventory.TotalExpectedUnits</b></MudText>
                    </MudStack>
                </MudItem>
                <MudItem xs="12" sm="6" md="3">
                    <MudStack Spacing="1">
                        <MudText Typo="Typo.caption" Color="Color.Secondary">Total Counted</MudText>
                        <MudText Typo="Typo.body1"><b>@inventory.TotalCountedUnits</b></MudText>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <!-- Details Table -->
        <MudPaper Elevation="2">
            <MudTable Items="@filteredRows" Hover="true" Dense="true" Filter="new Func<InventoryRowViewModel, bool>(FilterFunc)">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Inventory Items</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString"
                                  Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-0"
                                  Immediate="true"
                                  DebounceInterval="300" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Product Code</MudTh>
                    <MudTh>Product Name</MudTh>
                    <MudTh Style="text-align: center;">Expected Quantity</MudTh>
                    <MudTh Style="text-align: center;">Counted Quantity</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh Style="text-align: center;">Variance</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Code">@context.ProductCode</MudTd>
                    <MudTd DataLabel="Product Name">@context.ProductName</MudTd>
                    <MudTd DataLabel="Expected Qty" Style="text-align: center;">@context.ExpectedQuantity</MudTd>
                    <MudTd DataLabel="Counted Qty" Style="text-align: center;">@context.CountedQuantity</MudTd>
                    <MudTd DataLabel="Status">
                        @if (context.CountedQuantity == context.ExpectedQuantity)
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle">
                                Match
                            </MudChip>
                        }
                        else
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Warning" Icon="@Icons.Material.Filled.Error">
                                Discrepancy
                            </MudChip>
                        }
                    </MudTd>
                    <MudTd DataLabel="Variance" Style="text-align: center;">
                        @{
                            var variance = context.CountedQuantity - context.ExpectedQuantity;
                            if (variance == 0)
                            {
                                <MudText>-</MudText>
                            }
                            else
                            {
                                <MudText Color="@(variance > 0 ? Color.Success : Color.Error)">
                                    @(variance > 0 ? "+" : "")@variance
                                </MudText>
                            }
                        }
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.body1" Align="Align.Center" Class="pa-4">
                        No matching records found
                    </MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudStack>
}
else
{
    <MudAlert Severity="Severity.Error">Inventory not found</MudAlert>
}

@code {
    [Parameter]
    public int InventoryId { get; set; }

    private bool loading = true;
    private InventoryViewModel? inventory;
    private List<InventoryRowViewModel> inventoryRows = new();
    private List<InventoryRowViewModel> filteredRows = new();
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        try
        {
            // Get inventory details
            inventory = await InventoryService.GetInventoryDetailsAsync(InventoryId);

            if (inventory != null)
            {
                // Get inventory rows
                inventoryRows = await InventoryService.GetRowsViewModelAsync(InventoryId);
                filteredRows = inventoryRows;
            }
        }
        finally
        {
            loading = false;
        }
    }

    private bool FilterFunc(InventoryRowViewModel row)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        var search = searchString.ToLower();

        return (row.ProductCode ?? "").ToLower().Contains(search) ||
               row.ProductName.ToLower().Contains(search) ||
               row.ExpectedQuantity.ToString().Contains(search) ||
               row.CountedQuantity.ToString().Contains(search);
    }
}