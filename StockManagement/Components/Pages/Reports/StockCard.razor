@page "/stock-card/{ProductId:int}"

@using StockManagement.ViewModels.Products
@using StockManagement.Models

@inject IReportService ReportService
@inject NavigationManager NavigationManager

<PageTitle>Stock Card - @stockCard?.ProductName</PageTitle>

@if (stockCard == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudStack Spacing="3">
        <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudTooltip Text="Back to Products List">
                    <MudIconButton Icon="@Icons.Material.Filled.ArrowBack"
                                   Color="Color.Primary"
                                   OnClick="@(() => NavigationManager.NavigateTo("/stock-card"))" />
                </MudTooltip>
                <MudStack Row="true" AlignItems="AlignItems.Baseline" Spacing="1">
                    <MudText Typo="Typo.h4">Stock Card: </MudText>
                    <MudText Typo="Typo.h5" Color="Color.Secondary">
                        @stockCard.ProductName @(string.IsNullOrWhiteSpace(stockCard.ProductCode)
                                                 ? ""
                                                 : $"({@stockCard.ProductCode})")
                    </MudText>
                </MudStack>
            </MudStack>
            <MudChip T="string" Color="Color.Info" Size="Size.Large">
                Current Stock: @stockCard.CurrentStockLevel
            </MudChip>
        </MudStack>

        <MudPaper Class="pa-4" Elevation="2">
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudDatePicker Label="Start Date"
                                   @bind-Date="startDate"
                                   Clearable="true"
                                   MaxDate="endDate" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudDatePicker Label="End Date"
                                   @bind-Date="endDate"
                                   Clearable="true"
                                   MinDate="startDate" />
                </MudItem>
                <MudItem xs="12" sm="12" md="4" Class="d-flex align-end">
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="ApplyFilters"
                               FullWidth="true">
                        Apply Filters
                    </MudButton>
                    <MudButton Variant="Variant.Outlined"
                               Color="Color.Secondary"
                               OnClick="ClearFilters"
                               Class="ml-2"
                               FullWidth="true">
                        Clear Filters
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

        <MudPaper Elevation="2">
            <MudTable Items="@stockCard.Rows"
                      Hover="true"
                      Dense="true"
                      Loading="@loading"
                      LoadingProgressColor="Color.Primary"
                      Filter="new Func<StockCardRowViewModel, bool>(FilterFunc)">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Operations History</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString"
                                  Placeholder="Search"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-0"
                                  Immediate="true"
                                  DebounceInterval="300" />
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Date</MudTh>
                    <MudTh>Type</MudTh>
                    <MudTh>Supplier</MudTh>
                    <MudTh>Employee</MudTh>
                    <MudTh Style="text-align: right">Quantity</MudTh>
                    <MudTh Style="text-align: right">Balance</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Date">@context.Date.ToShortDateString()</MudTd>
                    <MudTd DataLabel="Type">
                        @{
                            var (color, icon, label) = GetOperationTypeDisplay(context.Type);
                        }
                        <MudChip T="string" Color="@color" Icon="@icon" Size="Size.Small">
                            @label
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Supplier">
                        @(string.IsNullOrEmpty(context.SupplierName) ? "-" : context.SupplierName)
                    </MudTd>
                    <MudTd DataLabel="Employee">
                        @(string.IsNullOrEmpty(context.EmployeeName) ? "-" : context.EmployeeName)
                    </MudTd>
                    <MudTd DataLabel="Quantity" Style="text-align: right">
                        <MudText Color="@(context.Type == OperationType.StockIn ? Color.Success : Color.Error)">
                            @(context.Type == OperationType.StockIn ? "+" : "-")@context.Quantity
                        </MudText>
                    </MudTd>
                    <MudTd DataLabel="Balance" Style="text-align: right">
                        <MudText Typo="Typo.body1"><b>@context.Balance</b></MudText>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Typo="Typo.body1" Align="Align.Center" Class="pa-4">
                        No operations found for this product.
                    </MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }"
                                   RowsPerPageString="Operations per page"
                                   InfoFormat="{first_item}-{last_item} of {all_items}" />
                </PagerContent>
            </MudTable>
        </MudPaper>
    </MudStack>
}

@code {
    [Parameter]
    public int ProductId { get; set; }

    StockCardViewModel? stockCard = null;
    DateTime? startDate = null;
    DateTime? endDate = null;
    string searchString = string.Empty;
    bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadStockCard();
    }

    private async Task LoadStockCard()
    {
        loading = true;
        try
        {
            stockCard = await ReportService.GetStockCardAsync(
                productId: ProductId,
                startDate: startDate,
                endDate: endDate
            );
        }
        catch (Exception ex)
        {
            // Handle error - could use Snackbar to show error message
            Console.WriteLine($"Error loading stock card: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task ApplyFilters()
    {
        await LoadStockCard();
    }

    private async Task ClearFilters()
    {
        startDate = null;
        endDate = null;
        await LoadStockCard();
    }

    private bool FilterFunc(StockCardRowViewModel row)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        var search = searchString.ToLower();

        return row.Date.ToShortDateString().Contains(search) ||
               row.SupplierName.ToLower().Contains(search) ||
               row.EmployeeName.ToLower().Contains(search) ||
               row.Type.ToString().ToLower().Contains(search) ||
               row.Quantity.ToString().Contains(search);
    }

    private (Color color, string icon, string label) GetOperationTypeDisplay(OperationType type)
    {
        return type switch
        {
            OperationType.StockIn => (Color.Success, Icons.Material.Filled.AddCircle, "Stock In"),
            OperationType.StockOut => (Color.Error, Icons.Material.Filled.RemoveCircle, "Stock Out"),
            _ => (Color.Default, Icons.Material.Filled.Help, "Unknown")
        };
    }
}